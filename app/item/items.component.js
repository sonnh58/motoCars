"use strict";
var core_1 = require("@angular/core");
var item_service_1 = require("./item.service");
var http_1 = require("@angular/http");
var element_registry_1 = require("nativescript-angular/element-registry");
element_registry_1.registerElement("pullToRefresh", function () { return require("nativescript-pulltorefresh").PullToRefresh; });
var ItemsComponent = (function () {
    function ItemsComponent(itemService, http) {
        this.itemService = itemService;
        this.http = http;
        this.rows = "auto";
    }
    ItemsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.itemService.getItems()
            .subscribe(function (res) { return _this.items = res; });
        this.itemService.getData()
            .subscribe(function (res) {
            _this.cars = res['listings'].listing;
            _this.makeGroup(_this.cars);
        });
    };
    ;
    ItemsComponent.prototype.makeGroup = function (cars) {
        var carsSortedByMake = cars.sort(function (a, b) {
            if (a.make < b.make)
                return -1;
            if (a.make > b.make)
                return 1;
            return 0;
        });
        this.groupsByMake = [];
        var currentMake = carsSortedByMake[0].make;
        var currentGroup = [];
        console.log(carsSortedByMake.length);
        for (var i = 0; i < carsSortedByMake.length; i++) {
            this.rows = this.rows.concat(" auto");
            //using toString because server return array not string
            //fix image_url if empty
            if (carsSortedByMake[i].image_url == null) {
                if (carsSortedByMake[i].images != null && carsSortedByMake[i].Images != null) {
                    carsSortedByMake[i].image_url = carsSortedByMake[i].Images.Image[0];
                }
                else {
                    //console.log(carsSortedByMake[i]);
                    carsSortedByMake[i].image_url = "assets/icon/coming_soon3.jpg";
                }
            }
            //fix price
            var priceCar = carsSortedByMake[i].price.toString();
            var index = priceCar.indexOf(".");
            if (parseInt(priceCar.substring(index + 1, priceCar.length)) == 0) {
                carsSortedByMake[i].price = priceCar.substring(0, index);
            }
            if ((carsSortedByMake[i].make.toString() != currentMake.toString())) {
                console.log(currentMake);
                console.log("khac");
                var newGroup = {
                    make: currentMake,
                    cars: currentGroup
                };
                this.groupsByMake.push(newGroup);
                currentMake = carsSortedByMake[i].make;
                currentGroup = [];
            }
            currentGroup.push(carsSortedByMake[i]);
        }
        var lastGroup = {
            make: currentMake,
            cars: currentGroup
        };
        this.groupsByMake.push(lastGroup);
    };
    ItemsComponent.prototype.refreshMe = function (args) {
        var _this = this;
        console.log("refreshing...");
        this.itemService.getData()
            .subscribe(function (res) {
            _this.cars = res['listings'].listing;
            _this.makeGroup(_this.cars);
            args.object.refreshing = false;
        });
    };
    return ItemsComponent;
}());
ItemsComponent = __decorate([
    core_1.Component({
        selector: "ns-items",
        moduleId: module.id,
        templateUrl: "./items.component.html",
    }),
    __metadata("design:paramtypes", [item_service_1.ItemService, http_1.Http])
], ItemsComponent);
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBa0Q7QUFHbEQsK0NBQTZDO0FBQzdDLHNDQUF3RDtBQUV4RCwwRUFBd0U7QUFFeEUsa0NBQWUsQ0FBQyxlQUFlLEVBQUMsY0FBTSxPQUFBLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLGFBQWEsRUFBbkQsQ0FBbUQsQ0FBQyxDQUFDO0FBTzNGLElBQWEsY0FBYztJQU12Qix3QkFBb0IsV0FBd0IsRUFBVSxJQUFVO1FBQTVDLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUZoRSxTQUFJLEdBQVcsTUFBTSxDQUFDO0lBR3RCLENBQUM7SUFFRCxpQ0FBUSxHQUFSO1FBQUEsaUJBUUM7UUFQRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTthQUN0QixTQUFTLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBaEIsQ0FBZ0IsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO2FBQ3JCLFNBQVMsQ0FBQyxVQUFBLEdBQUc7WUFDVixLQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDcEMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBQUEsQ0FBQztJQUVGLGtDQUFTLEdBQVQsVUFBVSxJQUFJO1FBQ1YsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dC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Q0FBQztRQUMzQyxDQUFDO1FBRUQsSUFBSSxTQUFTLEdBQUc7WUFDWixJQUFJLEVBQUUsV0FBVztZQUNqQixJQUFJLEVBQUUsWUFBWTtTQUNyQixDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNNLGtDQUFTLEdBQWhCLFVBQWtCLElBQVM7UUFBM0IsaUJBU0M7UUFSRyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO2FBQ3JCLFNBQVMsQ0FBQyxVQUFBLEdBQUc7WUFDVixLQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDcEMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDVixJQUFJLENBQUMsTUFBTyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUE7SUFFVixDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBckZELElBcUZDO0FBckZZLGNBQWM7SUFMMUIsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixXQUFXLEVBQUUsd0JBQXdCO0tBQ3hDLENBQUM7cUNBT21DLDBCQUFXLEVBQWdCLFdBQUk7R0FOdkQsY0FBYyxDQXFGMUI7QUFyRlksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi9pdGVtXCI7XG5pbXBvcnQgeyBJdGVtU2VydmljZSB9IGZyb20gXCIuL2l0ZW0uc2VydmljZVwiO1xuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVzcG9uc2UgfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuXG5pbXBvcnQgeyByZWdpc3RlckVsZW1lbnQgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvZWxlbWVudC1yZWdpc3RyeVwiO1xuaW1wb3J0IHsgUHVsbFRvUmVmcmVzaCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtcHVsbHRvcmVmcmVzaFwiXG5yZWdpc3RlckVsZW1lbnQoXCJwdWxsVG9SZWZyZXNoXCIsKCkgPT4gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wdWxsdG9yZWZyZXNoXCIpLlB1bGxUb1JlZnJlc2gpO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJucy1pdGVtc1wiLFxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9pdGVtcy5jb21wb25lbnQuaHRtbFwiLFxufSlcbmV4cG9ydCBjbGFzcyBJdGVtc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgaXRlbXM6IEFycmF5PGFueT47XG4gICAgY2FyczogYW55O1xuICAgIGdyb3Vwc0J5TWFrZTogQXJyYXk8YW55PjtcbiAgICByb3dzOiBzdHJpbmcgPSBcImF1dG9cIjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaXRlbVNlcnZpY2U6IEl0ZW1TZXJ2aWNlLCBwcml2YXRlIGh0dHA6IEh0dHApIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtU2VydmljZS5nZXRJdGVtcygpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHJlcyA9PiB0aGlzLml0ZW1zID0gcmVzKTtcbiAgICAgICAgdGhpcy5pdGVtU2VydmljZS5nZXREYXRhKClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUocmVzID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcnMgPSByZXNbJ2xpc3RpbmdzJ10ubGlzdGluZztcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VHcm91cCh0aGlzLmNhcnMpO1xuICAgICAgICAgICAgfSlcbiAgICB9O1xuXG4gICAgbWFrZUdyb3VwKGNhcnMpe1xuICAgICAgICBsZXQgY2Fyc1NvcnRlZEJ5TWFrZSA9IGNhcnMuc29ydCgoYSwgYik6IG51bWJlciA9PiB7XG4gICAgICAgICAgICBpZiAoYS5tYWtlIDwgYi5tYWtlKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChhLm1ha2UgPiBiLm1ha2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ3JvdXBzQnlNYWtlID0gW107XG5cbiAgICAgICAgbGV0IGN1cnJlbnRNYWtlID0gY2Fyc1NvcnRlZEJ5TWFrZVswXS5tYWtlO1xuICAgICAgICBsZXQgY3VycmVudEdyb3VwID0gW107XG4gICAgICAgIGNvbnNvbGUubG9nKGNhcnNTb3J0ZWRCeU1ha2UubGVuZ3RoKTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgY2Fyc1NvcnRlZEJ5TWFrZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5yb3dzID0gdGhpcy5yb3dzLmNvbmNhdChcIiBhdXRvXCIpXG4gICAgICAgICAgICAvL3VzaW5nIHRvU3RyaW5nIGJlY2F1c2Ugc2VydmVyIHJldHVybiBhcnJheSBub3Qgc3RyaW5nXG4gICAgICAgICAgICAvL2ZpeCBpbWFnZV91cmwgaWYgZW1wdHlcbiAgICAgICAgICAgIGlmIChjYXJzU29ydGVkQnlNYWtlW2ldLmltYWdlX3VybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhcnNTb3J0ZWRCeU1ha2VbaV0uaW1hZ2VzICE9IG51bGwgJiYgY2Fyc1NvcnRlZEJ5TWFrZVtpXS5JbWFnZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXJzU29ydGVkQnlNYWtlW2ldLmltYWdlX3VybCA9IGNhcnNTb3J0ZWRCeU1ha2VbaV0uSW1hZ2VzLkltYWdlWzBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coY2Fyc1NvcnRlZEJ5TWFrZVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIGNhcnNTb3J0ZWRCeU1ha2VbaV0uaW1hZ2VfdXJsID0gXCJhc3NldHMvaWNvbi9jb21pbmdfc29vbjMuanBnXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2ZpeCBwcmljZVxuICAgICAgICAgICAgbGV0IHByaWNlQ2FyOiBzdHJpbmcgPSBjYXJzU29ydGVkQnlNYWtlW2ldLnByaWNlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBsZXQgaW5kZXg6IG51bWJlciA9IHByaWNlQ2FyLmluZGV4T2YoXCIuXCIpO1xuICAgICAgICAgICAgaWYocGFyc2VJbnQocHJpY2VDYXIuc3Vic3RyaW5nKGluZGV4ICsgMSwgcHJpY2VDYXIubGVuZ3RoKSkgPT0gMCkge1xuICAgICAgICAgICAgICAgIGNhcnNTb3J0ZWRCeU1ha2VbaV0ucHJpY2UgPSBwcmljZUNhci5zdWJzdHJpbmcoMCwgaW5kZXgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKChjYXJzU29ydGVkQnlNYWtlW2ldLm1ha2UudG9TdHJpbmcoKSAhPSBjdXJyZW50TWFrZS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnRNYWtlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImtoYWNcIik7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0dyb3VwID0ge1xuICAgICAgICAgICAgICAgICAgICBtYWtlOiBjdXJyZW50TWFrZSxcbiAgICAgICAgICAgICAgICAgICAgY2FyczogY3VycmVudEdyb3VwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3Vwc0J5TWFrZS5wdXNoKG5ld0dyb3VwKTtcblxuICAgICAgICAgICAgICAgIGN1cnJlbnRNYWtlID0gY2Fyc1NvcnRlZEJ5TWFrZVtpXS5tYWtlO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cCA9IFtdO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50R3JvdXAucHVzaChjYXJzU29ydGVkQnlNYWtlW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsYXN0R3JvdXAgPSB7XG4gICAgICAgICAgICBtYWtlOiBjdXJyZW50TWFrZSxcbiAgICAgICAgICAgIGNhcnM6IGN1cnJlbnRHcm91cFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdyb3Vwc0J5TWFrZS5wdXNoKGxhc3RHcm91cCk7XG4gICAgfVxuICAgIHB1YmxpYyByZWZyZXNoTWUgKGFyZ3M6IGFueSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlZnJlc2hpbmcuLi5cIik7XG4gICAgICAgIHRoaXMuaXRlbVNlcnZpY2UuZ2V0RGF0YSgpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJzID0gcmVzWydsaXN0aW5ncyddLmxpc3Rpbmc7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWtlR3JvdXAodGhpcy5jYXJzKTtcbiAgICAgICAgICAgICAgICAoPFB1bGxUb1JlZnJlc2g+YXJncy5vYmplY3QpLnJlZnJlc2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pXG5cbiAgICB9XG59XG4iXX0=